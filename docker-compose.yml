version: '3.9' 

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: pedidos-db
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-sistemapedidos}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sistemapedidos_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: pedidos-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Backend NestJS
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pedidos-backend
    restart: unless-stopped
    ports:
      - '3000:3000'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      # Mantengo ambas variables para compatibilidad
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET:-}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
      REDIS_URL: redis://redis:6379
      # PayPal (opcional)
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID:-}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET:-}
      # Email (opcional)
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      SMTP_FROM: ${SMTP_FROM:-noreply@sistemapedidos.com}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/dist
    command: >
      sh -c "
        echo 'Esperando a que la base de datos esté lista...' &&
        npx prisma migrate deploy &&
        npx prisma generate &&
        npx prisma db seed &&
        npm run start:prod
      "
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-/api/v1}
        VITE_PAYPAL_CLIENT_ID: ${VITE_PAYPAL_CLIENT_ID:-}
    container_name: pedidos-frontend
    restart: unless-stopped
    ports:
      - '5173:80'
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_URL: ${VITE_API_URL:-/api/v1}
      VITE_PAYPAL_CLIENT_ID: ${VITE_PAYPAL_CLIENT_ID:-}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx reverse proxy (opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: pedidos-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    profiles:
      - production
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  default:
    name: pedidos-network
