# Opto por un Dockerfile alternativo que aprovecha bind mounts de cache para acelerar builds locales.
# Uso sugerido: DOCKER_BUILDKIT=1 docker-compose build

# Etapa de construcción
FROM node:20-alpine AS builder

WORKDIR /app

# Copio archivos de dependencias y Prisma para cachear instalaciones.
COPY package*.json ./
COPY prisma ./prisma/

# Uso un cache mount para npm y así reducir tiempos en instalaciones repetidas.
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# Traigo el código restante al contexto de build.
COPY . .

# Genero el cliente Prisma para habilitar el acceso tipado a la base de datos.
RUN npx prisma generate

# Compilo la aplicación.
RUN npm run build

# Etapa de producción
FROM node:20-alpine AS production

WORKDIR /app

# Instalo dependencias de producción usando cache de npm para máxima velocidad.
COPY package*.json ./
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production

# Copio artefactos de build y binarios de Prisma desde la etapa de builder.
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Creo un usuario no root para ejecutar la app de forma más segura.
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Ajusto permisos de la carpeta de trabajo.
RUN chown -R nestjs:nodejs /app
USER nestjs

# Expongo el puerto HTTP por defecto.
EXPOSE 3000

# Inicio la app compilada.
CMD ["node", "dist/main.js"]
